name: "AWS ECR Push and Terraform Deploy to EKS"

on:
  push:
    branches:
      - '*'
    paths:
      - app/**    

env:
  AWS_DEFAULT_REGION: us-east-2
  AWS_DEFAULT_OUTPUT: json
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  CONTAINER_IMAGE: devops-test-app:${{ github.sha }}
  ECR_REPOSITORY: devops-test-app
  SHORT_SHA: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: "3.7"

    - name: Install Dependencies
      run: python3.7 -m pip install fastapi

    # Add steps here like linting, testing, minification, etc.
    - name: Setup ECR
      run: |
        # Login to AWS ECR
        #$( aws ecr get-login --no-include-email )
        aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

    - name: Build and tag the image
      run: |
        # Build and tag the image
        docker build \
          -t $CONTAINER_IMAGE \
          -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE .

    # Only push to registry on main
    - name: Push
      #if: github.ref == 'refs/heads/main'
      run: |
        # Push image to AWS ECR
        docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$CONTAINER_IMAGE    
  deploy:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./app
    #if: github.ref == 'refs/heads/master'
    #needs:
    #  - run-tests
    needs: build-and-push
    steps:
    - name: Clone
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
      
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    #- name: Build, tag, and push image to Amazon ECR
    # id: build-image
    #  env:
    #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #  run: |
    #    cd site
    #    docker image build \
    #    --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest \
    #    --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }} \
    #    .
    #    docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
    #    docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.SHORT_SHA }}
    - name: Replace Environment Variables
      uses: danielr1996/envsubst-action@1.0.0
      env:
        ECR_REGISTRY: $ECR_REGISTRY
        IMAGE_TAG: $SHORT_SHA
        ECR_REPOSITORY: $ECR_REPOSITORY
      with:
        input: app/git-deployment.yml
        output: app/deploy.yml

    - name: Install and configure kubectl
      run: |
        VERSION=$(curl --silent https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        # https://github.com/aws/aws-cli/issues/6920#issuecomment-1117981158
        VERSION=v1.23.6
        curl https://storage.googleapis.com/kubernetes-release/release/$VERSION/bin/linux/amd64/kubectl \
          --progress-bar \
          --location \
          --remote-name
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        echo ${{ secrets.KUBECONFIG }} | base64 --decode > kubeconfig.yaml
    - name: Open Web Client Directory
      working-directory: src/webclient
      run: |
        ls -la
    - name: Deploy
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        export IMAGE_TAG=${{ env.SHORT_SHA }}
        export KUBECONFIG=kubeconfig.yaml
        kubectl apply -f app/deploy.yaml